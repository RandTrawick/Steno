{
"KW*LS": "===",
"KWALS/KWALS": "==",
"KWALS/KWALS/KWALS": "===",
"SKWR*S": "{^}js",
"SKWR*S/AOEFP": "{^}.forEach((item, index, array) => \\{\nconsole.log('item');\nconsole.log(item);\nconsole.log('index');\nconsole.log(index);\nconsole.log('array');\nconsole.log(array);{#Down};",
"SKWR*S/HREPBG": "{^}.length",
"SKWR*S/HRO*G": "{^}console.log();{#Left Left}{^}",
"SKWR*S/HROG": "{^}console.log(\"d\");\nconsole.log(d);{#Up}{#Left}{#Control_L(Shift_L(Left))}{#Control_L(d)}{^}",
"SKWR*S/-LD": "JSON-LD",
"SKWR*S/K-FL": "{^}console.log();{#Left Left}",
"SKWR*S/K-FPL": "{^}console.log('d');{#Return}{^}console.log(d);{#Up Left Shift_L(Left)}",
"SKWR*S/KAEUS": "let caseOnThis = '';{#Return}switch (caseOnThis) \\{{#Return}case 1:{#Return}\\{{#Return}// this.hello;{#Return}break;{#Down}case 2:{#Return}\\{{#Return}// stacked case, with fall through;{#Return}{#Down} default:{#Return}\\{{#Return}// this is the same as case else;{#Return};",
"SKWR*S/KHREUBG": "{^}.click(function() \\{{#Return}console.log('you clicked');{#Down};{#Up}",
"SKWR*S/KOPLT": "/////////////////////////////\n// comment //\n/////////////////////////////{#Up Up}{#Right Right Right} ",
"SKWR*S/KP-PT": "expect().toEqual();{#Left Left Left Left Left Left Left Left Left Left Left Left}",
"SKWR*S/KW*ER": "{^}$(''){#Left Left}",
"SKWR*S/SKWR": "{^}$(''){#Left Left}",
"SKWR*S/PHR*US": "' +  + '{#Left Left Left Left}",
"SKWR*S/PURB": "{^}.push();{#Left Left}",
"SKWR*S/PW-F": "{^}beforeEach(function() \\{\\});{#Left Left Left}",
"SKWR*S/PWRABG": "({})",
"SKWR*S/SET": "const setter = new Set();{#Left left left left left left left left left left left left left left}",
"SKWR*S/SHO": "it('should', function() \\{\\});{#Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left}",
"SKWR*S/SHREBG/TOR": "{^}const container = document.querySelector('');{#Left Left Left}",
"SKWR*S/SKHROEUPB": "{#command(right)}{;}",
"SKWR*S/SKWR-FPB": "json",
"SKWR*S/SKPORT": "module.exports = newy;{#Left}",
"SKWR*S/SKREUB": "{^}describe('yourFunction', function() \\{\\});{#Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left}",
"SKWR*S/STREUPBG": "{^}JSON.stringify(){#Left}",
"SKWR*S/STR*EUPBG": "{^}console.log(JSON.stringify());{#Left Left Left}",
"SKWR*S/TH":"{^}this.{^}",
"SKWR*S/TH/STAEUT":"{^}this.state.{^}",
"SKWR*S/THEPB": "{^}.then(function(data)\\{\nconsole.log('data');\nconsole.log(data);\n\\})\n//if an error arises anywhere in the chain this function will be invoked\n.catch(function(err) \\{\nconsole.log(err);\n\\});",
"SKWR*S/TKOPL": "{^}$(function() \\{{#Return}; // old school DOM ready {#Left}",
"SKWR*S/TP": "{^}if () \\{\n{#Up}{#Right Right}",
"SKWR*S/TP*": "{^}if () \\{\\} else \\{\\}{#Up}{#Right Right Right Right Right}",
"SKWR*S/TPHU": "{^}const newy = () => {}\\{{#Left Left Left Left Left Left Left Left Left Left Left}}",
"SKWR*S/TPOR": "const loopArray = [1,2,3,4,5]{#Return}// always declare outside the loop so it doesn't have to instantiate on every loop{#Return}for (let i = 0, x = loopArray.length; i < x; i++)\\{{#Return}// console.log(loopArray[i]);{#Return}loopArray[i];{#Return}console.log(loopArray[i]);{#Return}\\}{#Return}{#Up Up Up}",
"SKWR*S/TPUPBGS": "{^}()\\{}{#Return}{#Down};{#Left Left Left}{#Backspace}{#Up}",
"SKWR-B": "{#Shift_L(Down)}",
"SKWR-BG": "{#Control_L(Shift_L(Right))}",
"SKWR-FBL": "{#Shift_L(Page_Down)}",
"SKWR-FPL": "{#Shift_L(Home)}",
"SKWR-G": "{#Shift_L(Right)}",
"SKWR-P": "{#Shift_L(Up)}",
"SKWR-R": "{#Shift_L(Left)}",
"SKWR-RB": "{#Control_L(Shift_L(Left))}",
"SKWR-RBG": "{#Shift_L(End)}",
"SKWR-RBLT": "{&dÊ’}",
"SKWR-RPG": "{#Shift_L(Page_Up)}",
"SKWR-S/KPHEPBT": "/**{#Return * Return * / Up}{-|}",
"STREUPBG/TPEU": "stringify",
"STREUPBG/TPAOEU": "stringify"
}