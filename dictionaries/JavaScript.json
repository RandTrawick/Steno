{
  "K*FT": "const{*>}",
  "KW*LS": "===",
  "KWALS/KWALS": "==",
  "KWALS/KWALS/KWALS": "===",
  "SA*F": "--save",
  "SKWR*S": "{^}js",
  "SKWR*S/AOEFP": "{^}.forEach((item) => \\{\ndebugger;{#Down};",
  "SKWR*S/A/WAEUT": "const getSiteMap = async () => \\{\nconst axiosData = await axios.get(URL).then(response => \\{",
  "SKWR*S/ELS": "else \\{\n}{^}",
  "SKWR*S/EUPBT": "{^}$\\{\\}{#Left}{^}",
  "SKWR*S/S/TPHUPL": "{^}Number.isInteger(){#Left}{^}",
  "SKWR*S/HRAOP": "{^}{>}const loopArray = [1,2,3,4,5]{#Return}{#Return}for (let i = 0, x = loopArray.length; i < x; i += 1)\\{{#Return}loopArray[i];{#Up Up Up Left Left Left}",
  "SKWR*S/HREPBG": "{^}.length",
  "SKWR*S/HRO*G": "{^}console.log();{#Left Left}{^}",
  "SKWR*S/HROG": "{^}console.log(\"d\");\nconsole.log(d);{#Up}{#Left}{#Control_L(Shift_L(Left))}{^}",
  "SKWR*S/-LD": "JSON-LD",
  "SKWR*S/K-FL": "{^}console.log();{#Left Left}",
  "SKWR*S/K-FPL": "{^}console.log('d');{#Return}{^}console.log(d);{#Up Left Shift_L(Left)}",
  "SKWR*S/KAEUS": "let caseOnThis = '';{#Return}switch (caseOnThis) \\{{#Return}case 1:{#Return}\\{{#Return}// this.hello;{#Return}break;{#Down}case 2:{#Return}\\{{#Return}// stacked case, with fall through;{#Return}{#Down} default:{#Return}\\{{#Return}// this is the same as case else;{#Return};",
  "SKWR*S/KHREUBG": "{^}.click((e) => \\{{#Return}console.log('you clicked');{#Down};{#Up}",
  "SKWR*S/KOPLT": "/////////////////////////////\n// comment //\n/////////////////////////////{#Up Up}{#Right Right Right} ",
  "SKWR*S/KP-PT": "expect().toEqual();{#Left Left Left Left Left Left Left Left Left Left Left Left}",
  "SKWR*S/KW*ER": "{^}$(''){#Left Left}",
  "SKWR*S/SKWR": "{^}$(''){#Left Left}",
  "SKWR*S/OPB": "{^}.on('click','anyUnBoundSelector',(e) => \\{{#Return}debugger;{#Down};{#Up Up}{#Right Right Right Right Right Right Right Right Right Right}",
  "SKWR*S/PARS": "{^}JSON.parse(){#Left}",
  "SKWR*S/PHAP": "{^}.map((item) => item + 't');",
  "SKWR*S/PHR*US": "' +  + '{#Left Left Left Left}",
  "SKWR*S/PREFPBT": "{^}.preventDefault();",
  "SKWR*S/PROPLS": "{^}const promiseFunction = () => (\nnew Promise((resolve, reject) =>\\{{#Return}debugger;{#Up Up}",
  "SKWR*S/PRO*PLS": "{^}return new Promise((resolve, reject) =>\\{",
  "SKWR*S/PURB": "{^}.push();{#Left Left}",
  "SKWR*S/PW-F": "{^}beforeEach(() => \\{\\});{#Left Left Left}",
  "SKWR*S/PWRABG": "({})",
  "SKWR*S/RAOEUR": " = require('');{#Left Left Left}",
  "SKWR*S/RE/PHRAEUS": "{^}.replace('','');{#Left Left Left Left Left Left}",
  "SKWR*S/SET": "const setter = new Set();{#Left left left left left left left left left left left left left left}",
  "SKWR*S/SHO": "{^}{>}it('', () => \\{\n{#Down};{#Left Backspace Up Up Right Right}",
  "SKWR*S/SHREBG/TOR": "{^}const container = document.querySelector('');{#Left Left Left}",
  "SKWR*S/SKHROEUPB": "{#command(right)}{;}",
  "SKWR*S/SKWR-FPB": "json",
  "SKWR*S/SKHROG": "console.log({^}",
  "SKWR*S/SKPORT": "module.exports = newy;{#Left}",
  "SKWR*S/SKREUB": "{^}describe('yourFunction', () => \\{\\});{#Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left}",
  "SKWR*S/SKWARPB": "{>}console.warn({^}",
  "SKWR*S/SPRED": "...{^}",
  "SKWR*S/SPRAED": "{...^}",
  "SKWR*S/HR*PS": "{...^}",
  "SKWR*S/SPHREUT": "{^}.split(){#Left}",
  "SKWR*S/STREUPBG": "{^}JSON.stringify(){#Left}",
  "SKWR*S/STR*EUPBG": "{^}console.log(JSON.stringify());{#Left Left Left}",
  "SKWR*S/SW-BS": "{^...}",
  "SKWR*S/TAOEUP": "typeof",
  "SKWR*S/TEFT": "{^}{>}test('', () => \\{\n{#Down};{#Left Backspace Up Up Right Right Right Right}",
  "SKWR*S/TERPB": "{>}stringy ? stringy.length > 0 : null;{#Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left}",
  "SKWR*S/TH": "{^}this.{^}",
  "SKWR*S/TH/STAEUT": "{^}this.state.{^}",
  "SKWR*S/THEPB": "{^}.then((data) =>\\{\ndebugger;{#Down}.catch((err) => \\{\nconsole.log(err);",
  "SKWR*S/TKEUPBGS": "{^}.indexOf(){#Left}",
  "SKWR*S/TKPEUFT": "{^}.toExist()",
  "SKWR*S/TKPU": "{^}.toExclude({^}",
  "SKWR*S/TKOPL": "{^}$(() => \\{{#Return}; // old school DOM ready {#Left}",
  "SKWR*S/TKWAUL": "{^}.toEqual({^}",
  "SKWR*S/TO/TPEUFD": "{^}.toFixed({#Right}{^};{#Left Left}",
  "SKWR*S/TO/TPHUPL": "{^}.parseFloat({#Right}{^};{#Left Left}",
  "SKWR*S/TP": "{^}if () \\{\n{#Up}{#Right Right}",
  "SKWR*S/TPEUPBD": "{^}.find();{#Left Left}",
  "SKWR*S/TP*": "{^}if () \\{\\} else \\{\\}{#Up}{#Right Right Right Right Right}",
  "SKWR*S/TPEURLT": "{^}.filter((array) => array.value === filterValue);{#Left Left Control_L(Shift_L(Left))}",
  "SKWR*S/TPHU": "{^}const newy = () => {}\\{{#Left Left Left Left Left Left Left Left Left Left Left}}",
  "SKWR*S/TPOR": "{^}for (let item of items)\\{\n        ",
  "SKWR*S/TPOR/TPH": "{#Down Backspace Backspace Backspace}{^}for (let item in items)\\{\n",
  "SKWR*S/TPUPBGS": "{^}()\\{}{#Return}{#Down};{#Left Left Left}{#Backspace}{#Up}",
  "SKWR*S/TREU": "{^}try \\{\n {#Down} catch (e) \\{\n{#Up Up}",
  "SKWR*S/WHAOEUL": "{^}while (condition) \\{\n{#Up}{#Right Right Right Right Right Control_L(Shift_L(Right))}",
  "SKWR-B": "{#Shift_L(Down)}",
  "SKWR-BG": "{#Control_L(Shift_L(Right))}",
  "SKWR-FBL": "{#Shift_L(Page_Down)}",
  "SKWR-FPL": "{#Shift_L(Home)}",
  "SKWR-G": "{#Shift_L(Right)}",
  "SKWR-P": "{#Shift_L(Up)}",
  "SKWR-R": "{#Shift_L(Left)}",
  "SKWR-RB": "{#Control_L(Shift_L(Left))}",
  "SKWR-RBG": "{#Shift_L(End)}",
  "SKWR-RBLT": "{&d í}",
  "SKWR-RPG": "{#Shift_L(Page_Up)}",
  "SKWR-S/KPHEPBT": "/**{#Return * Return * / Up}{-|}",
  "STREUPBG/TPEU": "stringify",
  "STREUPBG/TPAOEU": "stringify",
  "TKPWRAF/KW*L": "GraphQL",
  "TPH*PL/TK*EF": "--save-dev"
}
