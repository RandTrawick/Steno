{
  "*EFPB": "env",
  "*E/S*/HREUPBT": "eslint",
  "AO*US": "{>}use{^}{-|}",
  "ES/HREUPBT": "eslint",
  "K*FT": "{^}{>}const{*>}",
  "KW*LS": "===",
  "KWALS/KWALS": "==",
  "KWALS/KWALS/KWALS": "===",
  "PAO*EUPD": "||",
  "PWA*BL/TPEU": "babelify",
  "PWA*BL/TPEU/D": "babelifed",
  "PWA*BL/TPEUD": "babelifed",
  "PWAB/EL/TPEU": "babelify",
  "PWAB/EL/TPEU/D": "babelifed",
  "PWAB/EL/TPEUD": "babelifed",
  "SA*F": "--save",
  "SKRAO*EPB/KWAO*ER/PWEU/TEGT": "screen.queryByText();{#Left Left}",
  "SKRAO*EPB/TKPWET/PWEU/EUD": "screen.getByTestId();{#Left Left}",
  "SKRAO*EPB/TKPWET/PWEU/TEFT/EUD": "screen.getByTestId();{#Left Left}",
  "SKRAO*EPB/TKPWET/PWEU/TEGT": "screen.getByText();{#Left Left}",
  "SKRAO*EPB/TKPWUG": "{^}{>}screen.debug();",
  "SKWR*PB": "{>}json",
  "SKWR*S": "{^}js",
  "SKWR*S/-LD": "JSON-LD",
  "SKWR*S/A*EUR": "=[",
  "SKWR*S/A/RAEU": "=[",
  "SKWR*S/A/WAEUT": "{^}{>}const awaitData = async () => \\{\nconst fetchedData = await axios.get(URL);{#Super_L(Left) Right Right Right Right Right Right Right}",
  "SKWR*S/AD": "{^}.add();{#Left Left}",
  "SKWR*S/AD/KHRAS": "{^}.addddClass(){#Left}",
  "SKWR*S/AOEFP": "{^}.forEach((item) => \\{\ndebugger;{#Down};",
  "SKWR*S/AOURP": "{^}{>}.toUpperCase();",
  "SKWR*S/AT": "{^}.at();{#Left Left}",
  "SKWR*S/ELS": "{^}{>}else \\{\n}{^}",
  "SKWR*S/EPB/KOED": "{^}{>}encodeURI();{#Left Left}",
  "SKWR*S/EUPL/PORT": "{^}{>}import d from 'd';{#Left Left Left Left Left Left Left Left Left Left Shift_L(Left)}{^}",
  "SKWR*S/EUPBT": "{^}$\\{\\}{#Left}{^}",
  "SKWR*S/HAOEUD": "{^}.hide();",
  "SKWR*S/HAS": "{^}.has(){#Left}",
  "SKWR*S/HAS/KHRAS": "{^}.hassClass(){#Left}",
  "SKWR*S/HAS/OEPB/PROPT": "{^}   .hahasOwnProperty();{#Left Left}",
  "SKWR*S/HR*PS": "{...^}",
  "SKWR*S/HRAOP": "{^}{>}const loopArray = [1,2,3,4,5]{#Return}{#Return}for (let i = 0, x = loopArray.length; i < x; i += 1)\\{{#Return}loopArray[i];{#Up Up Up Left Left Left}",
  "SKWR*S/HREPB": "{^}.length > 0",
  "SKWR*S/HREPBG": "{^}.length",
  "SKWR*S/HRO*G": "{^}console.log();{#Left Left}{^}",
  "SKWR*S/HROER": "{^}{>}.toLowerCase();",
  "SKWR*S/HROG": "{^}console.log(\"d\");\nconsole.log(d);{#Up}{#Left}{#Control_L(Shift_L(Left))}{^}",
  "SKWR*S/K-FL": "{^}console.log();{#Left Left}",
  "SKWR*S/K-FPL": "{^}console.log('d');{#Return}{^}console.log(d);{#Up Left Shift_L(Left)}",
  "SKWR*S/KAEUS": "let switchOnThis = '';{#Return}switch (switchOnThis) \\{{#Return}case 1:\\{break;\\}case 2:\\{break;\\}default:\\{break;\\}",
  "SKWR*S/KAFP": "{^}.catch((err) => \\{\ndebugger;\nconsole.log(err);",
  "SKWR*S/KAUPB/KAT": "{^}.concat();{#Left Left}",
  "SKWR*S/KHRAS": "{^}{>}const ClassExpression = class NewClass \\{constructor(valueOne, valueTwo) \\{this.valueOne = valueOne;this.valueTwo = valueTwo;}}}",
  "SKWR*S/KHREUBG": "{^}.click((e) => \\{{#Return}console.log('you clicked');{#Down};{#Up}",
  "SKWR*S/KHRUS": "{^}.includes();{#Left Left}",
  "SKWR*S/KOPB/KAT": "{^}.concat();{#Left Left}",
  "SKWR*S/KP-PT": "expect().toEqual();{#Left Left Left Left Left Left Left Left Left Left Left Left}",
  "SKWR*S/KP*PT": "expect().(){#Left Left}{MODE:CAMEL}",
  "SKWR*S/KW*ER/SHREBGT": "{^}.querySelector('');{#Left Left Left}",
  "SKWR*S/KW*ER/SHREBGT/O*R": "{^}.querySelector('');{#Left Left Left}",
  "SKWR*S/KWAO*ER/SHREBGT/O*R": "{^}.querySelector('');{#Left Left Left}",
  "SKWR*S/KWAO*ER/SHREBGT": "{^}.querySelector('');{#Left Left Left}",
  "SKWR*S/KPH*EPBT": "/////////////////////////////\n// comment //\n/////////////////////////////{#Up Up}{#Right Right Right Right Right Right Right} ",
  "SKWR*S/KPHEPBT": "/*\n*/{#Up Return Tab}{^}{-|}",
  "SKWR*S/KW*ER": "{^}$(''){#Left Left}",
  "SKWR*S/O*B": "=\\{",
  "SKWR*S/O*B/HREPB": "{^}  Object.entries(yourObject).length > 0",
  "SKWR*S/O*B/KAOES": "{^}  Object.keys(yourObject);{#Left Left Left Super_L(d)}",
  "SKWR*S/O*B/SPWREUS": "{^}  Object.entries(yourObject).forEach(([key, value]) => \\{\n",
  "SKWR*S/O*B/TPEURLT": "{^}  Object.values(yourObject).filter(value => value?.item ==='item",
  "SKWR*S/OEU": "/**{#Return}",
  "SKWR*S/OPB": "{^}.on('click','anyUnBoundSelector',(e) => \\{{#Return}debugger;{#Down};{#Up Up}{#Right Right Right Right Right Right Right Right Right Right}",
  "SKWR*S/RO*ER": "{^}{>}throw new Error(`Some error: $\\{\\}`);{#Left Left Left Left}",
  "SKWR*S/ROEUR": "{^}{>}throw new Error(`Some error: $\\{\\}`);{#Left Left Left Left}",
  "SKWR*S/PARS": "{^}JSON.parse(){#Left}",
  "SKWR*S/PHA*T": "Math.",
  "SKWR*S/PHAP": "{^}.map((item) => item + 't');",
  "SKWR*S/PHA*P": "{^}.map((item, index) => \\{\n return item + 't'",
  "SKWR*S/PHEUPBLG": "{^}{>}mjs",
  "SKWR*S/PHR*US": "' +  + '{#Left Left Left Left}",
  "SKWR*S/PREFPBT": "{^}.preventDefault();",
  "SKWR*S/PRO*PLS": "{^}return new Promise((resolve, reject) =>\\{",
  "SKWR*S/PROPLS": "{^}const promiseFunction = () => (\nnew Promise((resolve, reject) =>\\{{#Return}debugger;{#Up Up}",
  "SKWR*S/PURB": "{^}.push();{#Left Left}",
  "SKWR*S/PW-F": "{^}beforeEach(() => \\{\\});{#Left Left Left}",
  "SKWR*S/PWRABG": "({})",
  "SKWR*S/R*EG": "{^}{>}/^.*check.*$/{#Left Left Left Left Left Left Left}",
  "SKWR*S/RAED/TPAOEUL": "{^}const filePath = path.resolve(__dirname,'_documents','file.json');\nlet data;\ntry \\{data = await fs.promises.readFile(filePath, 'utf8');\n {#Down} catch (e) \\{\n{#Up Up}",
  "SKWR*S/RAOEUR": " = require('');{#Left Left Left}",
  "SKWR*S/RAOUS": "{^}{>}const results = array.reduce((acc, item) => \\{if (item === 'd') \\{acc.push(item);\\}return acc;\\}, []);",
  "SKWR*S/RE/PHOF/KHRAS": "{^}.removeClass();{#Left Left}",
  "SKWR*S/RE/PHRAEUS": "{^}.replace('','');{#Left Left Left Left Left Left}",
  "SKWR*S/REG": "{^}{>}const matcher = new RegExp(/^.*check.*$/)\nmatcher.test(text){#Up}{#Right Right Right Right Right Right Right Right Right Right Right Right Right Right Right}",
  "SKWR*S/RURPB": "{^}{>}\\{return\\}{#Left}",
  "SKWR*S/S/A/RAEU": "{^}Array.isArray(){#Left}{^}",
  "SKWR*S/S/TPHUPL": "{^}Number.isInteger(){#Left}{^}",
  "SKWR*S/SET": "{^}{>}const setter = new Set();{#Left left left left left left left left left left left left left left}",
  "SKWR*S/SHO": "{^}{>}it('', async() => \\{\n{#Down};{#Left Backspace Up Up Right Right}{^}should",
  "SKWR*S/SHOE": "{^}.show();",
  "SKWR*S/SHREBG/TOR": "{^}const container = document.querySelector('');{#Left Left Left}",
  "SKWR*S/SKHROEUPB": "{#command(right)}{;}",
  "SKWR*S/SKHROG": "console.log({^}",
  "SKWR*S/SKPEBGT": "expect().toEqual();{#Left Left Left Left Left Left Left Left Left Left Left Left}",
  "SKWR*S/SKP*EBGT": "expect().(){#Left}{MODE:CAMEL}",
  "SKWR*S/SKPEBGT/TO/SR/PW/KAULD/W": "expect().toHaveBeenCalledWith();{#Left Left Left Left Left Left Left Left Left Left Left Left}",
  "SKWR*S/SKPORT": "{^}export default function ()\\{\n}{#Left Left Left Left Left Left}",
  "SKWR*S/SKPO*RT": "module.exports = newy;{#Left}",
  "SKWR*S/SKREUB": "{^}describe('yourFunction', () => \\{\\});{#Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left}",
  "SKWR*S/SKWARPB": "{>}console.warn({^}",
  "SKWR*S/SKWR": "{^}$(''){#Left Left}",
  "SKWR*S/SKWR*": "{^}$(){#Left}{^}{>}",
  "SKWR*S/SKWREFT/TPUPBGS": "{>}jest.fn();",
  "SKWR*S/SKWREFT/TAOEUPL/OUT": "{>}jest.setTimeout(50000);",
  "SKWR*S/SORT": "{^}.sort((a, b) => (a.value > b.value) ? 1 : -1);{#Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left}",
  "SKWR*S/SPHREUT": "{^}.split();{#Left Left}",
  "SKWR*S/SPRAED": "{...^}",
  "SKWR*S/SPRED": "...{^}",
  "SKWR*S/SPWREUS": "{^}Object.entries(childNode).forEach(([key,value]) => \\{\n{#Down};{#Up}",
  "SKWR*S/STKRUFP": "{>}const  \\{\\} ={#Left Left Left}",
  "SKWR*S/STKRUFP/EUPL/PORT": "{^}{>}import \\{\\} from 'd';{#Right Right Right Backspace Backspace Left Left Left Left Left Left Left Left Left Left Shift_L(Left)}{^}",
  "SKWR*S/STR*EUPBG": "{^}console.log(JSON.stringify());{#Left Left Left}",
  "SKWR*S/STREUPBG": "{^}JSON.stringify(){#Left}",
  "SKWR*S/SW-BS": "{^...}",
  "SKWR*S/T": "{^}{>}it('', () => \\{\n{#Down};{#Left Backspace Up Up Right Right}{^}",
  "SKWR*S/TAOEUP": "{>}typeof",
  "SKWR*S/TEFT": "{^}{>}test('', () => \\{\n{#Down};{#Left Backspace Up Up Right Right Right Right}{^}",
  "SKWR*S/TERPB": "{>}stringy ? stringy.length > 0 : false;{#Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left Left}",
  "SKWR*S/TH": "{^}this.{^}",
  "SKWR*S/TH/STAEUT": "{^}this.state.{^}",
  "SKWR*S/THEPB": "{^}.then((data) =>\\{\ndebugger;{#Down}.catch((err) => \\{\nconsole.log(err);",
  "SKWR*S/THROE": "{^}throw new Error(",
  "SKWR*S/THROU": "{^}throw new Error(",
  "SKWR*S/TKEUPBGS": "{^}.indexOf(){#Left}",
  "SKWR*S/TKO*BG": "/**{#Return}",
  "SKWR*S/TKOBG": "jsdoc",
  "SKWR*S/TKOPL": "{^}$(() => \\{{#Return}; // old school DOM ready {#Left}",
  "SKWR*S/TKPEUFT": "{^}.toExist()",
  "SKWR*S/TKPU": "{^}.toExclude({^}",
  "SKWR*S/TKWAUL": "{^}.toEqual({^}",
  "SKWR*S/TKPWET/PWEU/EUD": "const \\{ getById \\} = render(<SomeComponent />);\nconst someElement = getById('some-component');{#Up Left Left Left Left Left Left}",
  "SKWR*S/TKPWET/PWEU/TEGT": "render(<SomeComponent />);\nconst element = screen.getByText('some text');{#Up Left Left Left Left Left Left}",
  "SKWR*S/TO/AOURP": "{^}{>}.toUpperCase();",
  "SKWR*S/TO/HROER": "{^}{>}.toLowerCase();",
  "SKWR*S/TO/STREUPBG": "{^}.toString({#Right}{^};{^}",
  "SKWR*S/TO/TPEUFD": "{^}.toFixed({#Right}{^};{#Left Left}{^}",
  "SKWR*S/TO/TPHUPL": "parseFloat({#Right}{^};{#Left Left}{^}",
  "SKWR*S/TO/UP": "{^}{>}.toUpperCase();",
  "SKWR*S/TP": "{^}if () \\{\n{#Up}{#Right Right}",
  "SKWR*S/TP*": "{^}if () \\{\\} else \\{\\}{#Up}{#Right Right Right Right Right}",
  "SKWR*S/TPEFP": "{^}const fetchResponse = await fetch(endpoint);\nconst responseData = await fetchResponse.json();{#Super_L(Left)}{#Right Right Right Right Right Right Right}",
  "SKWR*S/TPEUPBD": "{^}.find();{#Left Left}",
  "SKWR*S/TPEURLT": "{^}.filter((array) => array.value === filterValue);{#Left Left Control_L(Shift_L(Left))}",
  "SKWR*S/TPHAULS": "!=",
  "SKWR*S/TPHAULZ": "!==",
  "SKWR*S/TPHOPLS": "() => \\{\\};{#Left Left}",
  "SKWR*S/TPHU": "{^}const newy = () => \\{{#Left Left Left Left Left Left Left Left Left Left Left}}",
  "SKWR*S/TPOR": "{^}for (let item of items)\\{\n        ",
  "SKWR*S/TPOR/TPH": "{#Down Backspace Backspace Backspace}{^}for (let i in items)\\{\n",
  "SKWR*S/TPUPBGS": "{^}()\\{}{#Return}{#Down};{#Left Left Left}{#Backspace}{#Up}",
  "SKWR*S/TREU": "{^}try \\{\n {#Down} catch (error) \\{\nthrow new Error(`Error context: $\\{error.message\\}`);{#Up Up}",
  "SKWR*S/UPB/SHEUFT": "{^}.unshift();{#Left Left}",
  "SKWR*S/WAEUT/TPOR": "{^}await waitFor(() => \\{\\});{#Left Left Left}",
  "SKWR*S/WHAOEUL": "{^}while (condition) \\{\n{#Up}{#Right Right Right Right Right Control_L(Shift_L(Right))}",
  "SKWR*S/WRAOEUT/TPAOEUL": "{^}const dataFilePath = path.resolve(__dirname, 'api', 'the', 'long', 'path', 'foo.txt');\nfs.writeFile(dataFilePath, 'bar', (err) => { if (err) throw err; });{#Super_L(Left)}",
  "SKWR-B": "{#Shift_L(Down)}",
  "SKWR-BG": "{#Control_L(Shift_L(Right))}",
  "SKWR-FBL": "{#Shift_L(Page_Down)}",
  "SKWR-FPL": "{#Shift_L(Home)}",
  "SKWR-G": "{#Shift_L(Right)}",
  "SKWR-P": "{#Shift_L(Up)}",
  "SKWR-R": "{#Shift_L(Left)}",
  "SKWR-RB": "{#Control_L(Shift_L(Left))}",
  "SKWR-RBG": "{#Shift_L(End)}",
  "SKWR-RBLT": "{&dʒ}",
  "SKWR-RPG": "{#Shift_L(Page_Up)}",
  "SO*URS": "src",
  "SRAOET": "vite",
  "STHAEUT": "this.state.{^}{>}",
  "STREUPBG/TPAOEU": "stringify",
  "STREUPBG/TPEU": "stringify",
  "TKPWRAF/KW*L": "GraphQL",
  "TPH-PLT": "{>}npx",
  "TPHA*ULS": "!==",
  "TPHO*D/RE/PHOF": "rm -r node_modules;rm -r package-lock.json;{#Return}",
  "TR*BT": "attr"
}
